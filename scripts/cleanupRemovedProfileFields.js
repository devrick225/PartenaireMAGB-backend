const mongoose = require('mongoose');
require('dotenv').config();

async function cleanupRemovedProfileFields() {
  try {
    console.log('üßπ D√©but du nettoyage des champs supprim√©s du profil...');

    // Connexion √† la base de donn√©es
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/partenaire-magb');
    console.log('‚úÖ Connect√© √† MongoDB');

    // Obtenir la collection profiles directement
    const profilesCollection = mongoose.connection.db.collection('profiles');

    // Compter les documents avant nettoyage
    const totalProfiles = await profilesCollection.countDocuments();
    console.log(`üìä ${totalProfiles} profils trouv√©s`);

    // Champs √† supprimer
    const fieldsToRemove = {
      // Informations professionnelles supprim√©es
      employer: 1,
      monthlyIncome: 1,
      
      // Informations eccl√©siastiques supprim√©es
      'churchMembership.churchName': 1,
      'churchMembership.membershipDate': 1,
      'churchMembership.baptismDate': 1,
      'churchMembership.ministry': 1,
      'churchMembership.churchRole': 1,
      
      // Pr√©f√©rences de communication (section compl√®te)
      communicationPreferences: 1,
      
      // B√©n√©volat (section compl√®te)
      volunteer: 1,
      
      // Informations du conjoint
      'familyInfo.spouse': 1
    };

    console.log('üîÑ Suppression des champs obsol√®tes...');
    
    // Supprimer les champs
    const result = await profilesCollection.updateMany(
      {}, // Tous les documents
      { $unset: fieldsToRemove }
    );

    console.log(`‚úÖ ${result.modifiedCount} profils mis √† jour`);
    
    // V√©rifier quelques profils pour confirmer le nettoyage
    console.log('\nüîç V√©rification d\'un profil nettoy√©...');
    const sampleProfile = await profilesCollection.findOne({});
    if (sampleProfile) {
      const hasRemovedFields = [
        'employer',
        'monthlyIncome', 
        'communicationPreferences',
        'volunteer'
      ].some(field => sampleProfile.hasOwnProperty(field));
      
      const hasRemovedChurchFields = sampleProfile.churchMembership && [
        'churchName',
        'membershipDate', 
        'baptismDate',
        'ministry',
        'churchRole'
      ].some(field => sampleProfile.churchMembership.hasOwnProperty(field));
      
      const hasRemovedSpouse = sampleProfile.familyInfo && 
        sampleProfile.familyInfo.hasOwnProperty('spouse');

      if (!hasRemovedFields && !hasRemovedChurchFields && !hasRemovedSpouse) {
        console.log('‚úÖ Nettoyage confirm√© - Aucun champ obsol√®te trouv√©');
      } else {
        console.log('‚ö†Ô∏è Attention - Certains champs obsol√®tes subsistent');
      }
    }

    // Statistiques finales
    console.log('\nüìä R√©sum√© du nettoyage:');
    console.log(`- Profils trait√©s: ${result.modifiedCount}/${totalProfiles}`);
    console.log('- Champs supprim√©s:');
    console.log('  ‚Ä¢ employer (informations professionnelles)');
    console.log('  ‚Ä¢ monthlyIncome (informations professionnelles)');
    console.log('  ‚Ä¢ churchName, membershipDate, baptismDate, ministry, churchRole (informations eccl√©siastiques)');
    console.log('  ‚Ä¢ communicationPreferences (section compl√®te)');
    console.log('  ‚Ä¢ volunteer (section compl√®te)');
    console.log('  ‚Ä¢ familyInfo.spouse (informations du conjoint)');

    console.log('\nüéâ Nettoyage termin√© avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  } finally {
    await mongoose.disconnect();
    console.log('‚úÖ D√©connect√© de MongoDB');
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  cleanupRemovedProfileFields();
}

module.exports = cleanupRemovedProfileFields; 