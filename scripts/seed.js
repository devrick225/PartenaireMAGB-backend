const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

// Import des mod√®les
const User = require('../models/User');
const Ministry = require('../models/Ministry');
const Donation = require('../models/Donation');
const Payment = require('../models/Payment');

console.log('üå± D√©marrage du script de seed...');

// Connexion √† la base de donn√©es
const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/partenaire-magb');
    console.log(`‚úÖ MongoDB connect√©: ${conn.connection.host}`);
  } catch (error) {
    console.error('‚ùå Erreur de connexion MongoDB:', error);
    process.exit(1);
  }
};

// Fonction pour nettoyer la base de donn√©es
const cleanDatabase = async () => {
  try {
    console.log('üßπ Nettoyage de la base de donn√©es...');
    
    // Supprimer toutes les collections
    await User.deleteMany({});
    await Ministry.deleteMany({});
    await Donation.deleteMany({});
    await Payment.deleteMany({});
    
    console.log('‚úÖ Base de donn√©es nettoy√©e');
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
    throw error;
  }
};

// Fonction pour g√©n√©rer un ID partenaire unique
const generatePartnerId = async () => {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let partnerId;
  let isUnique = false;
  let attempts = 0;
  const maxAttempts = 10;

  while (!isUnique && attempts < maxAttempts) {
    // G√©n√©rer un ID de 10 caract√®res : 2 lettres + 8 chiffres/lettres
    let id = '';
    
    // Les 2 premiers caract√®res sont des lettres (pour faciliter la lecture)
    for (let i = 0; i < 2; i++) {
      id += characters.charAt(Math.floor(Math.random() * 26)); // Lettres seulement (A-Z)
    }
    
    // Les 8 caract√®res suivants sont alphanum√©riques
    for (let i = 0; i < 8; i++) {
      id += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    
    partnerId = id;
    
    // V√©rifier l'unicit√©
    const existingUser = await User.findOne({ partnerId });
    if (!existingUser) {
      isUnique = true;
    }
    
    attempts++;
  }
  
  if (!isUnique) {
    throw new Error('Impossible de g√©n√©rer un ID partenaire unique apr√®s plusieurs tentatives');
  }
  
  return partnerId;
};

// Cr√©er les utilisateurs par d√©faut
const createUsers = async () => {
  try {
    console.log('üë• Cr√©ation des utilisateurs...');
    
    const usersData = [
      {
        firstName: 'Administrateur',
        lastName: 'Syst√®me',
        email: 'admin@partenairemagb.com',
        phone: '+225070000001',
        password: 'Admin123456!',
        role: 'admin',
        country: 'C√¥te d\'Ivoire',
        city: 'Abidjan',
        isEmailVerified: true,
        isPhoneVerified: true,
        language: 'fr',
        currency: 'XOF',
        timezone: 'Africa/Abidjan'
      },
      {
        firstName: 'Tr√©sorier',
        lastName: 'Principal',
        email: 'tresorier@partenairemagb.com',
        phone: '+225070000002',
        password: 'Tresorier123!',
        role: 'treasurer',
        country: 'C√¥te d\'Ivoire',
        city: 'Abidjan',
        isEmailVerified: true,
        isPhoneVerified: true,
        language: 'fr',
        currency: 'XOF'
      },
      {
        firstName: 'Support',
        lastName: 'Agent',
        email: 'support@partenairemagb.com',
        phone: '+225070000003',
        password: 'Support123!',
        role: 'support_agent',
        country: 'C√¥te d\'Ivoire',
        city: 'Abidjan',
        isEmailVerified: true,
        isPhoneVerified: true,
        language: 'fr',
        currency: 'XOF'
      },
      {
        firstName: 'Jean',
        lastName: 'Kouassi',
        email: 'jean.kouassi@example.com',
        phone: '+225070000004',
        password: 'User123456!',
        role: 'user',
        country: 'C√¥te d\'Ivoire',
        city: 'Abidjan',
        isEmailVerified: true,
        isPhoneVerified: true,
        language: 'fr',
        currency: 'XOF',
        totalDonations: 150000,
        donationCount: 5,
        points: 150,
        level: 1,
        partnerLevel: 'classique'
      },
      {
        firstName: 'Marie',
        lastName: 'Kouadio',
        email: 'marie.kouadio@example.com',
        phone: '+225070000005',
        password: 'User123456!',
        role: 'user',
        country: 'C√¥te d\'Ivoire',
        city: 'Yamoussoukro',
        isEmailVerified: true,
        isPhoneVerified: true,
        language: 'fr',
        currency: 'XOF',
        totalDonations: 500000,
        donationCount: 8,
        points: 500,
        level: 1,
        partnerLevel: 'bronze'
      },
      {
        firstName: 'Paul',
        lastName: 'Brou',
        email: 'paul.brou@example.com',
        phone: '+225070000006',
        password: 'User123456!',
        role: 'user',
        country: 'C√¥te d\'Ivoire',
        city: 'Bouak√©',
        isEmailVerified: true,
        isPhoneVerified: true,
        language: 'fr',
        currency: 'XOF',
        totalDonations: 1500000,
        donationCount: 12,
        points: 1500,
        level: 2,
        partnerLevel: 'argent'
      }
    ];

    const createdUsers = [];
    for (const userData of usersData) {
      try {
        // G√©n√©rer un partnerId unique pour chaque utilisateur
        const partnerId = await generatePartnerId();
        userData.partnerId = partnerId;
        
        console.log(`üîÑ Cr√©ation utilisateur: ${userData.email} avec partnerId: ${partnerId}`);
        
        const user = new User(userData);
        const savedUser = await user.save();
        createdUsers.push(savedUser);
        
        console.log(`‚úÖ Utilisateur cr√©√©: ${userData.email} (ID Partenaire: ${savedUser.partnerId})`);
      } catch (userError) {
        console.error(`‚ùå Erreur cr√©ation utilisateur ${userData.email}:`, userError.message);
        // Continuer avec les autres utilisateurs
      }
    }

    console.log(`‚úÖ ${createdUsers.length} utilisateurs cr√©√©s sur ${usersData.length} tentatives`);
    return createdUsers;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des utilisateurs:', error);
    throw error;
  }
};

// Cr√©er les minist√®res par d√©faut
const createMinistries = async () => {
  try {
    console.log('‚õ™ Cr√©ation des minist√®res...');
    
    const ministries = [
      {
        title: 'Minist√®re des Enfants',
        description: 'Minist√®re d√©di√© √† l\'√©vang√©lisation et √† l\'encadrement des enfants de 3 √† 12 ans. Nous organisons des activit√©s ludiques et √©ducatives pour leur enseigner la parole de Dieu.',
        category: 'children',
        order: 1,
        isActive: true,
        contactInfo: {
          name: 'S≈ìur Marie Kouadio',
          phone: '+225070000010',
          email: 'enfants@partenairemagb.com'
        },
        meetingInfo: {
          day: 'dimanche',
          time: '09:00',
          location: 'Salle des enfants'
        }
      },
      {
        title: 'Minist√®re des Jeunes',
        description: 'Minist√®re pour les jeunes de 13 √† 35 ans. Notre mission est de former des leaders spirituels et d\'accompagner les jeunes dans leur d√©veloppement personnel et spirituel.',
        category: 'youth',
        order: 2,
        isActive: true,
        contactInfo: {
          name: 'Fr√®re Jean-Paul Assi',
          phone: '+225070000011',
          email: 'jeunes@partenairemagb.com'
        },
        meetingInfo: {
          day: 'samedi',
          time: '15:00',
          location: 'Salle de conf√©rence'
        }
      },
      {
        title: 'Minist√®re des Femmes',
        description: 'Minist√®re f√©minin ax√© sur l\'autonomisation des femmes, l\'√©ducation biblique et les projets sociaux. Nous organisons √©galement le Concert annuel des Femmes.',
        category: 'women',
        order: 3,
        isActive: true,
        contactInfo: {
          name: 'Madame Adjoua Koffi',
          phone: '+225070000012',
          email: 'femmes@partenairemagb.com'
        },
        meetingInfo: {
          day: 'mercredi',
          time: '18:00',
          location: 'Salle principale'
        }
      },
      {
        title: 'Minist√®re des Hommes',
        description: 'Minist√®re masculin pour le d√©veloppement du leadership spirituel et familial. Focus sur la paternit√© responsable et l\'engagement communautaire.',
        category: 'men',
        order: 4,
        isActive: true,
        contactInfo: {
          name: 'Pasteur Andr√© Konan',
          phone: '+225070000013',
          email: 'hommes@partenairemagb.com'
        },
        meetingInfo: {
          day: 'samedi',
          time: '08:00',
          location: 'Bureau pastoral'
        }
      },
      {
        title: 'Minist√®re de Louange',
        description: 'Minist√®re musical responsable de l\'animation des cultes et √©v√©nements sp√©ciaux. Formation de choristes et musiciens.',
        category: 'music',
        order: 5,
        isActive: true,
        contactInfo: {
          name: 'Fr√®re David Yao',
          phone: '+225070000014',
          email: 'louange@partenairemagb.com'
        },
        meetingInfo: {
          day: 'jeudi',
          time: '19:00',
          location: 'Studio de musique'
        }
      },
      {
        title: 'Minist√®re de Pri√®re',
        description: 'Minist√®re d\'intercession et de pri√®re. Organisation de veill√©es de pri√®re, cha√Ænes de pri√®re et accompagnement spirituel.',
        category: 'prayer',
        order: 6,
        isActive: true,
        contactInfo: {
          name: 'S≈ìur Grace N\'Guessan',
          phone: '+225070000015',
          email: 'priere@partenairemagb.com'
        },
        meetingInfo: {
          day: 'mardi',
          time: '19:00',
          location: 'Salle de pri√®re'
        }
      },
      {
        title: 'Minist√®re d\'√âvang√©lisation',
        description: 'Minist√®re charg√© de l\'√©vang√©lisation et des missions. Organisation de campagnes d\'√©vang√©lisation et formation d\'√©vang√©listes.',
        category: 'evangelism',
        order: 7,
        isActive: true,
        contactInfo: {
          name: '√âvang√©liste Pierre Kouakou',
          phone: '+225070000016',
          email: 'evangelisation@partenairemagb.com'
        },
        meetingInfo: {
          day: 'vendredi',
          time: '18:30',
          location: 'Salle de formation'
        }
      },
      {
        title: 'Minist√®re Social',
        description: 'Minist√®re d\'action sociale et caritative. Aide aux d√©munis, visites aux malades, projets communautaires.',
        category: 'social',
        order: 8,
        isActive: true,
        contactInfo: {
          name: 'Diacre Aya Kon√©',
          phone: '+225070000017',
          email: 'social@partenairemagb.com'
        },
        meetingInfo: {
          day: 'lundi',
          time: '17:00',
          location: 'Bureau administratif'
        }
      }
    ];

    const createdMinistries = [];
    for (const ministryData of ministries) {
      const ministry = new Ministry(ministryData);
      const savedMinistry = await ministry.save();
      createdMinistries.push(savedMinistry);
      console.log(`‚úÖ Minist√®re cr√©√©: ${ministryData.title}`);
    }

    console.log(`‚úÖ ${createdMinistries.length} minist√®res cr√©√©s`);
    return createdMinistries;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des minist√®res:', error);
    throw error;
  }
};

// Cr√©er des donations d'exemple
const createDonations = async (users) => {
  try {
    console.log('üí∞ Cr√©ation des donations d\'exemple...');
    
    // V√©rifier qu'on a des utilisateurs
    if (!users || users.length === 0) {
      console.log('‚ö†Ô∏è Aucun utilisateur trouv√©, skip des donations');
      return [];
    }
    
    // Obtenir les utilisateurs non-admin
    const regularUsers = users.filter(user => user.role === 'user');
    
    if (regularUsers.length === 0) {
      console.log('‚ö†Ô∏è Aucun utilisateur r√©gulier trouv√©, skip des donations');
      return [];
    }
    
    console.log(`üìä ${regularUsers.length} utilisateurs r√©guliers trouv√©s pour cr√©er des donations`);

    // Cr√©er les donations en fonction du nombre d'utilisateurs disponibles
    const donations = [];
    
    // Donations de base (n√©cessite au moins 1 utilisateur)
    if (regularUsers.length >= 1) {
      donations.push({
        user: regularUsers[0]._id,
        amount: 50000,
        currency: 'XOF',
        category: 'don_ponctuel',
        type: 'one_time',
        status: 'completed',
        paymentMethod: 'mobile_money',
        message: 'Don pour les ≈ìuvres de l\'√©glise',
        isAnonymous: false
      });
      
      donations.push({
        user: regularUsers[0]._id,
        amount: 25000,
        currency: 'XOF',
        category: 'don_libre',
        type: 'one_time',
        status: 'completed',
        paymentMethod: 'card',
        message: 'Que Dieu b√©nisse cette ≈ìuvre',
        isAnonymous: false
      });
      
      // Don r√©current pour le premier utilisateur
      donations.push({
        user: regularUsers[0]._id,
        amount: 25000,
        currency: 'XOF',
        category: 'don_mensuel',
        type: 'recurring',
        status: 'completed',
        paymentMethod: 'mobile_money',
        message: 'Don mensuel r√©gulier',
        recurring: {
          frequency: 'monthly',
          interval: 1,
          dayOfMonth: 15,
          startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Il y a 30 jours
          isActive: true,
          nextPaymentDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000), // Dans 15 jours
          totalExecutions: 1
        }
      });
    }
    
    // Donations suppl√©mentaires (n√©cessite au moins 2 utilisateurs)
    if (regularUsers.length >= 2) {
      donations.push({
        user: regularUsers[1]._id,
        amount: 100000,
        currency: 'XOF',
        category: 'don_concert_femmes',
        type: 'one_time',
        status: 'completed',
        paymentMethod: 'mobile_money',
        message: 'Participation au Concert des Femmes 2024',
        isAnonymous: false
      });
      
      donations.push({
        user: regularUsers[1]._id,
        amount: 75000,
        currency: 'XOF',
        category: 'don_ponctuel',
        type: 'one_time',
        status: 'completed',
        paymentMethod: 'bank_transfer',
        isAnonymous: true
      });
      
      // Don r√©current pour le deuxi√®me utilisateur
      donations.push({
        user: regularUsers[1]._id,
        amount: 50000,
        currency: 'XOF',
        category: 'don_mensuel',
        type: 'recurring',
        status: 'completed',
        paymentMethod: 'card',
        message: 'Partenariat mensuel',
        recurring: {
          frequency: 'monthly',
          interval: 1,
          dayOfMonth: 1,
          startDate: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000), // Il y a 60 jours
          isActive: true,
          nextPaymentDate: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // Dans 1 jour
          totalExecutions: 2
        }
      });
    }
    
    // Donations avanc√©es (n√©cessite au moins 3 utilisateurs)
    if (regularUsers.length >= 3) {
      donations.push({
        user: regularUsers[2]._id,
        amount: 200000,
        currency: 'XOF',
        category: 'don_ria_2025',
        type: 'one_time',
        status: 'completed',
        paymentMethod: 'card',
        message: 'Pour le projet RIA 2025',
        isAnonymous: false
      });
      
      // Don r√©current pour le troisi√®me utilisateur
      donations.push({
        user: regularUsers[2]._id,
        amount: 100000,
        currency: 'XOF',
        category: 'don_mensuel',
        type: 'recurring',
        status: 'completed',
        paymentMethod: 'bank_transfer',
        message: 'Soutien mensuel aux minist√®res',
        recurring: {
          frequency: 'monthly',
          interval: 1,
          dayOfMonth: 5,
          startDate: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000), // Il y a 90 jours
          isActive: true,
          nextPaymentDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // Dans 5 jours
          totalExecutions: 3
        }
      });
    }

    const createdDonations = [];
    for (const donationData of donations) {
      const donation = new Donation(donationData);
      
      // Ajouter une entr√©e d'historique
      donation.addToHistory('created', 'Donation cr√©√©e lors du seed');
      if (donation.status === 'completed') {
        donation.addToHistory('completed', 'Donation compl√©t√©e automatiquement');
      }
      
      const savedDonation = await donation.save();
      createdDonations.push(savedDonation);
      
      console.log(`‚úÖ Donation cr√©√©e: ${donationData.amount} ${donationData.currency} (${donationData.type})`);
    }

    console.log(`‚úÖ ${createdDonations.length} donations cr√©√©es`);
    return createdDonations;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des donations:', error);
    throw error;
  }
};

// Cr√©er des paiements d'exemple
const createPayments = async (donations) => {
  try {
    console.log('üí≥ Cr√©ation des paiements d\'exemple...');
    
    // V√©rifier qu'on a des donations
    if (!donations || donations.length === 0) {
      console.log('‚ö†Ô∏è Aucune donation trouv√©e, skip des paiements');
      return [];
    }
    
    const payments = [];
    
    for (const donation of donations) {
      if (donation.status === 'completed') {
        // D√©terminer le provider en fonction de la m√©thode de paiement
        let provider = 'manual';
        switch (donation.paymentMethod) {
          case 'card':
            provider = 'stripe';
            break;
          case 'mobile_money':
            provider = 'cinetpay';
            break;
          case 'bank_transfer':
            provider = 'manual';
            break;
          case 'paypal':
            provider = 'paypal';
            break;
          case 'moneyfusion':
            provider = 'moneyfusion';
            break;
          default:
            provider = 'manual';
        }
        
        const payment = new Payment({
          donation: donation._id,
          user: donation.user,
          amount: donation.amount,
          currency: donation.currency,
          paymentMethod: donation.paymentMethod,
          provider: provider,
          status: 'completed',
          transactionId: `TXN_${Date.now()}_${Math.random().toString(36).substr(2, 9).toUpperCase()}`,
          providerResponse: {
            status: 'success',
            message: 'Paiement trait√© avec succ√®s',
            timestamp: new Date()
          },
          processedAt: new Date()
        });
        
        const savedPayment = await payment.save();
        payments.push(savedPayment);
        
        // Mettre √† jour la donation avec la r√©f√©rence du paiement
        donation.payment = savedPayment._id;
        await donation.save();
      }
    }
    
    console.log(`‚úÖ ${payments.length} paiements cr√©√©s`);
    return payments;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des paiements:', error);
    throw error;
  }
};

// Fonction principale
const seedDatabase = async () => {
  try {
    console.log('üöÄ D√©marrage du processus de seed...');
    
    // Connexion √† la base de donn√©es
    await connectDB();
    
    // Nettoyer la base de donn√©es
    await cleanDatabase();
    
    // Cr√©er les donn√©es de seed
    const users = await createUsers();
    const ministries = await createMinistries();
    
    // Cr√©er les donations seulement si on a des utilisateurs
    let donations = [];
    let payments = [];
    
    if (users && users.length > 0) {
      donations = await createDonations(users);
      if (donations && donations.length > 0) {
        payments = await createPayments(donations);
      }
    } else {
      console.log('‚ö†Ô∏è Aucun utilisateur cr√©√©, skip des donations et paiements');
    }
    
    // R√©sum√© final
    console.log('\nüéâ Seed termin√© avec succ√®s !');
    console.log('================================');
    console.log(`üë• Utilisateurs cr√©√©s: ${users.length}`);
    console.log(`‚õ™ Minist√®res cr√©√©s: ${ministries.length}`);
    console.log(`üí∞ Donations cr√©√©es: ${donations.length}`);
    console.log(`üí≥ Paiements cr√©√©s: ${payments.length}`);
    console.log('================================');
    
    console.log('\nüìã Comptes de test cr√©√©s:');
    console.log('Admin: admin@partenairemagb.com / Admin123456!');
    console.log('Tr√©sorier: tresorier@partenairemagb.com / Tresorier123!');
    console.log('Support: support@partenairemagb.com / Support123!');
    console.log('Utilisateur 1: jean.kouassi@example.com / User123456!');
    console.log('Utilisateur 2: marie.kouadio@example.com / User123456!');
    console.log('Utilisateur 3: paul.brou@example.com / User123456!');
    
    console.log('\n‚úÖ Base de donn√©es initialis√©e et pr√™te √† l\'utilisation !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du seed:', error);
    process.exit(1);
  } finally {
    // Fermer la connexion
    await mongoose.connection.close();
    console.log('üîå Connexion MongoDB ferm√©e');
    process.exit(0);
  }
};

// Ex√©cuter le seed si le script est appel√© directement
if (require.main === module) {
  seedDatabase();
}

module.exports = {
  seedDatabase,
  cleanDatabase,
  createUsers,
  createMinistries,
  createDonations,
  createPayments
};
