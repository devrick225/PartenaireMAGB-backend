const twilio = require('twilio');

class SmsService {
  constructor() {
    // Initialiser Twilio uniquement si les cl√©s sont configur√©es
    if (process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN) {
      this.client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
      this.fromNumber = process.env.TWILIO_PHONE_NUMBER;
      this.isConfigured = true;
    } else {
      console.warn('‚ö†Ô∏è Twilio not configured - SMS services will use development mode');
      this.isConfigured = false;
    }
  }

  /**
   * Envoyer un SMS g√©n√©rique
   */
  async sendSms(to, message) {
    try {
      // Mode d√©veloppement - log le message
      if (!this.isConfigured || process.env.NODE_ENV === 'development') {
        console.log(`üì± SMS vers ${to}: ${message}`);
        return {
          success: true,
          messageId: `dev_${Date.now()}`,
          mode: 'development'
        };
      }

      // Formatter le num√©ro de t√©l√©phone
      const formattedNumber = this.formatPhoneNumber(to);
      
      const result = await this.client.messages.create({
        body: message,
        from: this.fromNumber,
        to: formattedNumber
      });

      console.log(`‚úÖ SMS envoy√© √† ${to}: ${result.sid}`);
      return {
        success: true,
        messageId: result.sid,
        status: result.status,
        mode: 'production'
      };

    } catch (error) {
      console.error('‚ùå Erreur envoi SMS:', error);
      throw new Error(`Erreur envoi SMS: ${error.message}`);
    }
  }

  /**
   * Envoyer un code de v√©rification de t√©l√©phone
   */
  async sendPhoneVerificationCode(phoneNumber, code, firstName = '') {
    const message = `Bonjour ${firstName},

Votre code de v√©rification PARTENAIRE MAGB est : ${code}

Ce code expire dans 10 minutes.
Ne partagez jamais ce code.`;

    return await this.sendSms(phoneNumber, message);
  }

  /**
   * Envoyer un code de r√©initialisation de mot de passe
   */
  async sendPasswordResetCode(phoneNumber, code, firstName = '') {
    const message = `Bonjour ${firstName},

Votre code de r√©initialisation PARTENAIRE MAGB est : ${code}

Ce code expire dans 10 minutes.
Utilisez-le pour r√©initialiser votre mot de passe.`;

    return await this.sendSms(phoneNumber, message);
  }

  /**
   * Envoyer une notification de don
   */
  async sendDonationNotification(phoneNumber, donationDetails) {
    const { amount, currency, receiptNumber, firstName } = donationDetails;
    
    const message = `Bonjour ${firstName},

Votre don de ${amount} ${currency} a √©t√© confirm√©.
Re√ßu n¬∞: ${receiptNumber}

Merci pour votre soutien √† PARTENAIRE MAGB !`;

    return await this.sendSms(phoneNumber, message);
  }

  /**
   * Envoyer une notification de paiement
   */
  async sendPaymentNotification(phoneNumber, paymentDetails) {
    const { amount, currency, status, firstName } = paymentDetails;
    
    let message = `Bonjour ${firstName},\n\n`;
    
    if (status === 'completed') {
      message += `Votre paiement de ${amount} ${currency} a √©t√© confirm√© avec succ√®s.\n\nMerci !`;
    } else if (status === 'failed') {
      message += `Votre paiement de ${amount} ${currency} a √©chou√©.\n\nVeuillez r√©essayer ou contacter le support.`;
    } else {
      message += `Votre paiement de ${amount} ${currency} est en cours de traitement.\n\nVous serez notifi√© du r√©sultat.`;
    }

    return await this.sendSms(phoneNumber, message);
  }

  /**
   * Formatter le num√©ro de t√©l√©phone au format international
   */
  formatPhoneNumber(phoneNumber) {
    // Supprimer tous les espaces et caract√®res sp√©ciaux
    let formatted = phoneNumber.replace(/\D/g, '');
    
    // Si le num√©ro commence par 0, remplacer par le code pays (exemple: +225 pour C√¥te d'Ivoire)
    if (formatted.startsWith('0')) {
      formatted = '225' + formatted.substring(1); // Code pays C√¥te d'Ivoire
    }
    
    // Ajouter le + si pas pr√©sent
    if (!formatted.startsWith('+')) {
      formatted = '+' + formatted;
    }
    
    return formatted;
  }

  /**
   * Valider le format du num√©ro de t√©l√©phone
   */
  isValidPhoneNumber(phoneNumber) {
    // Regex pour valider les num√©ros internationaux
    const phoneRegex = /^\+?[1-9]\d{1,14}$/;
    const cleaned = phoneNumber.replace(/\D/g, '');
    return phoneRegex.test('+' + cleaned);
  }

  /**
   * V√©rifier si SMS est configur√© et disponible
   */
  isAvailable() {
    return this.isConfigured;
  }

  /**
   * Obtenir le statut du service
   */
  getStatus() {
    return {
      configured: this.isConfigured,
      mode: process.env.NODE_ENV,
      fromNumber: this.fromNumber,
      provider: 'Twilio'
    };
  }
}

// Cr√©er une instance singleton
const smsService = new SmsService();

module.exports = smsService;
